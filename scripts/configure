#!/usr/bin/env python3

import sys
import os
from lib.rpcauth import get_data
import re

# Print an error if the user isn't running on Linux.
if sys.platform != 'linux':
    print('This script only works on Linux!')
    exit(1)

# Print an error if user is not root
if os.getuid() != 0:
  print('This script must be run as root!')
  exit(1)

# Check if the docker-compose binary is installed.
import subprocess
try:
    subprocess.check_call(['docker-compose', '--version'])
except:
    print('Docker-compose is not installed!')
    exit(1)

# Switch to Citadel root directory.
NODE_ROOT=os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
os.chdir(NODE_ROOT)
status_dir='./statuses'
# Make sure to use the main status dir for updates
if os.path.isfile('../.umbrel'):
    status_dir='../statuses'

# Configure for mainnet or testnet or regtest depending
# upon the user-supplied value of $NETWORK
# If the network is not specified, then use the mainnet
BITCOIN_NETWORK=os.environ.get('NETWORK') or 'mainnet'

# Check if network neither mainnet nor testnet nor regtest
if BITCOIN_NETWORK not in ['mainnet', 'testnet', 'regtest']:
    print('Error: Network must be either mainnet, testnet, or regtest!')
    exit(1)

print()
print("======================================")
if os.path.isfile(status_dir+'/configured'):
  print("=========== RECONFIGURING ============")
  reconfiguring=True
else:
  print("============ CONFIGURING =============")
  reconfiguring=False

print("============== CITADEL  ==============")
print("======================================")
print()

# Parse a dotenv file
def parse_dotenv(file_path):
    with open(file_path, 'r') as file:
      file_contents = file.read()
    values = {}
    lines = file_contents.split('\n')
    for line in lines:
      line = line.strip()
      if line.startswith('#') or not line:
        continue
      # Append to values
      key, value = line.split('=', 1)
      values[key] = value
    return values

  
##########################################################
############ Generate configuration variables ############
##########################################################

if reconfiguring:
  if os.path.isfile('../.umbrel'):
    dotenv=parse_dotenv('../.env')
  else:
    dotenv=parse_dotenv('./.env')

  BITCOIN_NETWORK=os.environ.get('OVERWRITE_NETWORK') or dotenv['BITCOIN_NETWORK']
  # Check if network neither mainnet nor testnet nor regtest
  if BITCOIN_NETWORK not in ['mainnet', 'testnet', 'regtest']:
      print('Error: Network must be either mainnet, testnet, or regtest!')
      exit(1)
  print("Using {} network".format(BITCOIN_NETWORK))
  print()
  BITCOIN_RPC_PORT=dotenv['BITCOIN_RPC_PORT']
  BITCOIN_P2P_PORT=dotenv['BITCOIN_P2P_PORT']
  BITCOIN_RPC_USER=dotenv['BITCOIN_RPC_USER']
  BITCOIN_RPC_PASS=dotenv['BITCOIN_RPC_PASS']
  BITCOIN_RPC_AUTH=dotenv['BITCOIN_RPC_AUTH']
  TOR_PASSWORD=dotenv['TOR_PASSWORD']
  TOR_HASHED_PASSWORD=dotenv['TOR_HASHED_PASSWORD']
else:
  # Generate RPC credentials
  print("Generating auth credentials")
  print()
  BITCOIN_RPC_USER="citadel"
  BITCOIN_RPC_DETAILS=get_data(BITCOIN_RPC_USER)
  BITCOIN_RPC_AUTH=BITCOIN_RPC_DETAILS['auth']
  BITCOIN_RPC_PASS=BITCOIN_RPC_DETAILS['password']

  # Pull Tor image and generate Tor password
  print("Generating Tor password")
  print()
  os.system('docker pull --quiet lncm/tor:0.4.5.7')
  TOR_PASSWORD=get_data('itdoesntmatter')['password']

  # run 'docker run --rm lncm/tor:0.4.5.7 --quiet --hash-password "$TOR_PASS"' and get its output
  # this is the password that is used to connect to the Tor network
  # the password is stored in the .env file
  TOR_HASHED_PASSWORD=os.popen('docker run --rm lncm/tor:0.4.5.7 --quiet --hash-password "{}"'.format(TOR_PASSWORD)).read()[:-1]

BITCOIN_NODE="neutrino"
NEUTRINO_PEERS=""
if BITCOIN_NETWORK == "mainnet":
  BITCOIN_RPC_PORT=8332
  BITCOIN_P2P_PORT=8333
elif BITCOIN_NETWORK == "testnet":
  BITCOIN_RPC_PORT=18332
  BITCOIN_P2P_PORT=18333
  NEUTRINO_PEERS='''
[neutrino]
neutrino.addpeer=testnet1-btcd.zaphq.io
neutrino.addpeer=testnet2-btcd.zaphq.io
  '''
elif BITCOIN_NETWORK == "regtest":
  BITCOIN_RPC_PORT=18334
  BITCOIN_P2P_PORT=18335
  BITCOIN_NODE="bitcoind"
else:
  exit(1)

# IP addresses for services

NETWORK_IP=          "10.21.21.0"
GATEWAY_IP=          "10.21.21.1"
NGINX_IP=            "10.21.21.2"
DASHBOARD_IP=        "10.21.21.3"
MANAGER_IP=          "10.21.21.4"
MIDDLEWARE_IP=       "10.21.21.5"
NEUTRINO_SWITCHER_IP="10.21.21.6"
BITCOIN_IP=          "10.21.21.7"
LND_IP=              "10.21.21.8"
TOR_PROXY_IP=        "10.21.21.9"
ELECTRUM_IP=         "10.21.21.10"
BITCOIN_ZMQ_RAWBLOCK_PORT="28332"
BITCOIN_ZMQ_RAWTX_PORT="28333"
BITCOIN_ZMQ_HASHBLOCK_PORT="28334"
LND_GRPC_PORT="10009"
LND_REST_PORT="8080"
ELECTRUM_PORT="50001"
TOR_PROXY_PORT="9050"
TOR_CONTROL_PORT="9051"
NGINX_PORT=os.environ.get('NGINX_PORT') or "80"



# Set LND fee URL for neutrino on mainnet
LND_FEE_URL=""
# If the network is mainnet and status_dir/node-status-bitcoind-ready doesn't exist, set the FEE_URL
if BITCOIN_NETWORK == 'mainnet' and not os.path.isfile(status_dir+'/node-status-bitcoind-ready'):
   LND_FEE_URL="feeurl=https://nodes.lightning.computer/fees/v1/btc-fee-estimates.json"

# Checks if a variable with the name exists, if not, check if an env var with the name existts
# if neither exists, then exit with an error
def get_var(var_name, other_locals):
  if var_name in locals():
    return str(locals()[var_name])
  elif var_name in other_locals:
    return str(other_locals[var_name])
  elif var_name in globals():
    return str(globals()[var_name])
  else:
    print("Error: {} is not defined!".format(var_name))
    exit(1)

# Converts a string to uppercase, also replaces all - with _
def convert_to_upper(string):
  return string.upper().replace('-', '_')

# Put variables in the config file. A config file accesses an env var $EXAMPLE_VARIABLE by containing <example-variable>
# in the config file. Check for such occurences and replace them with the actual variable
def replace_vars(file_path):
  with open(file_path, 'r') as file:
    file_contents = file.read()
  return re.sub(r'<(.*?)>', lambda m: get_var(convert_to_upper(m.group(1)), locals()), file_contents)

print("Generating config files")
print()
with open('./lnd/lnd.conf', 'w') as file:
  file.write(replace_vars('./templates/lnd-sample.conf'))
with open('./bitcoin/bitcoin.conf', 'w') as file:
  file.write(replace_vars('./templates/bitcoin-sample.conf'))
with open('./tor/torrc', 'w') as file:
  file.write(replace_vars('./templates/torrc-sample'))
with open('./.env', 'w') as file:
  file.write(replace_vars('./templates/.env-sample'))
with open('./electrs/electrs.toml', 'w') as file:
  file.write(replace_vars('./templates/electrs-sample.toml'))
with open('./nginx/nginx.conf', 'w') as file:
  file.write(replace_vars('./templates/nginx-sample.conf'))

print("Pulling Docker images")
print()
os.system('docker-compose pull --quiet')
print("Configuring permissions")
print()
os.system('chown -R 1000:1000 {}'.format(NODE_ROOT))
# Touch status_dir/configured
with open(status_dir+'/configured', 'w') as file:
  file.write('')
print("Configuration successful")
print("You can now start Citadel by running:")
print("  sudo ./scripts/start")
